# des_core.py

## dslee    2017-04-02 14:20:50	--	initial release

def	leftShift(din, rnd):
	if		rnd in [1,2,9,16]:
		return	(din & 0x7FFFFFF) << 1 | (din & 0x8000000) >> 27
	else:
		return	(din & 0x3FFFFFF) << 2 | (din & 0xC000000) >> 26

def	PC1(d):
	return ((d>> 7)&1)<<55|((d>>15)&1)<<54|((d>>23)&1)<<53|((d>>31)&1)<<52|((d>>39)&1)<<51|((d>>47)&1)<<50|((d>>55)&1)<<49|((d>>63)&1)<<48|((d>> 6)&1)<<47|((d>>14)&1)<<46|((d>>22)&1)<<45|((d>>30)&1)<<44|((d>>38)&1)<<43|((d>>46)&1)<<42|((d>>54)&1)<<41|((d>>62)&1)<<40|((d>> 5)&1)<<39|((d>>13)&1)<<38|((d>>21)&1)<<37|((d>>29)&1)<<36|((d>>37)&1)<<35|((d>>45)&1)<<34|((d>>53)&1)<<33|((d>>61)&1)<<32|((d>> 4)&1)<<31|((d>>12)&1)<<30|((d>>20)&1)<<29|((d>>28)&1)<<28|((d>> 1)&1)<<27|((d>> 9)&1)<<26|((d>>17)&1)<<25|((d>>25)&1)<<24|((d>>33)&1)<<23|((d>>41)&1)<<22|((d>>49)&1)<<21|((d>>57)&1)<<20|((d>> 2)&1)<<19|((d>>10)&1)<<18|((d>>18)&1)<<17|((d>>26)&1)<<16|((d>>34)&1)<<15|((d>>42)&1)<<14|((d>>50)&1)<<13|((d>>58)&1)<<12|((d>> 3)&1)<<11|((d>>11)&1)<<10|((d>>19)&1)<< 9|((d>>27)&1)<< 8|((d>>35)&1)<< 7|((d>>43)&1)<< 6|((d>>51)&1)<< 5|((d>>59)&1)<< 4|((d>>36)&1)<< 3|((d>>44)&1)<< 2|((d>>52)&1)<< 1|((d>>60)&1)<< 0

def	PC2(d):
	return ((d>>42)&1)<<47|((d>>39)&1)<<46|((d>>45)&1)<<45|((d>>32)&1)<<44|((d>>55)&1)<<43|((d>>51)&1)<<42|((d>>53)&1)<<41|((d>>28)&1)<<40|((d>>41)&1)<<39|((d>>50)&1)<<38|((d>>35)&1)<<37|((d>>46)&1)<<36|((d>>33)&1)<<35|((d>>37)&1)<<34|((d>>44)&1)<<33|((d>>52)&1)<<32|((d>>30)&1)<<31|((d>>48)&1)<<30|((d>>40)&1)<<29|((d>>49)&1)<<28|((d>>29)&1)<<27|((d>>36)&1)<<26|((d>>43)&1)<<25|((d>>54)&1)<<24|((d>>15)&1)<<23|((d>>4 )&1)<<22|((d>>25)&1)<<21|((d>>19)&1)<<20|((d>>9 )&1)<<19|((d>>1 )&1)<<18|((d>>26)&1)<<17|((d>>16)&1)<<16|((d>>5 )&1)<<15|((d>>11)&1)<<14|((d>>23)&1)<<13|((d>>8 )&1)<<12|((d>>12)&1)<<11|((d>>7 )&1)<<10|((d>>17)&1)<< 9|((d>>0 )&1)<< 8|((d>>22)&1)<< 7|((d>>3 )&1)<< 6|((d>>10)&1)<< 5|((d>>14)&1)<< 4|((d>>6 )&1)<< 3|((d>>20)&1)<< 2|((d>>27)&1)<< 1|((d>>24)&1)<< 0


def	keyGen(k):

	# DEBUG_controls
	DEBUG_keyGen=0

	keyC=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
	keyD=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
	tmpKey=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
	outKey=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]

	# PC-1, executed only once
	outPC1=		PC1(k)
	keyC[0]=	outPC1>>28
	keyD[0]=	outPC1&0xFFFFFFF

	for rnd in range(1,17):
		# LEFT SHIFT
		keyC[rnd]= leftShift(keyC[rnd-1], rnd)
		keyD[rnd]= leftShift(keyD[rnd-1], rnd)
		tmpKey[rnd-1]= keyC[rnd]<<28|keyD[rnd]

	for idx,tKey in enumerate( tmpKey ):
		outKey[idx]=	PC2( tKey )

	if	DEBUG_keyGen==1:	print("\n< Key Schedule >")
	if	DEBUG_keyGen==1:
		print( "outPC1:", "%07X"%keyC[0], "%07X"%keyD[0] )
		for rnd in range( 0,16 ):
			print("%2d"%(rnd+1),"kC:","%07X"%keyC[rnd+1],"kD:","%07X"%keyD[rnd+1],"rk:","%06X"%(outKey[rnd]>>24),"%06X"%(outKey[rnd]&0xFFFFFF) )

	return ['None']+outKey


# desCiphFunc
def	lastPerm(d):
	return	((d>>16)&1)<<31|((d>>25)&1)<<30|((d>>12)&1)<<29|((d>>11)&1)<<28|((d>> 3)&1)<<27|((d>>20)&1)<<26|((d>> 4)&1)<<25|((d>>15)&1)<<24|((d>>31)&1)<<23|((d>>17)&1)<<22|((d>> 9)&1)<<21|((d>> 6)&1)<<20|((d>>27)&1)<<19|((d>>14)&1)<<18|((d>> 1)&1)<<17|((d>>22)&1)<<16|((d>>30)&1)<<15|((d>>24)&1)<<14|((d>> 8)&1)<<13|((d>>18)&1)<<12|((d>> 0)&1)<<11|((d>> 5)&1)<<10|((d>>29)&1)<< 9|((d>>23)&1)<< 8|((d>>13)&1)<< 7|((d>>19)&1)<< 6|((d>> 2)&1)<< 5|((d>>26)&1)<< 4|((d>>10)&1)<< 3|((d>>21)&1)<< 2|((d>>28)&1)<< 1|((d>> 7)&1)<< 0

def	E_bit_selection(d):
## E BIT-SELECTION TABLE ( std doc. )
# 32  1   2   3   4   5   4   5
# 6   7   8   9   8   9   10  11
# 12  13  12  13  14  15  16  17
# 16  17  18  19  20  21  20  21
# 22  23  24  25  24  25  26  27
# 28  29  28  29  30  31  32  1
	return ((d>> 0)&1)<<47|((d>>31)&1)<<46|((d>>30)&1)<<45|((d>>29)&1)<<44|((d>>28)&1)<<43|((d>>27)&1)<<42|((d>>28)&1)<<41|((d>>27)&1)<<40|((d>>26)&1)<<39|((d>>25)&1)<<38|((d>>24)&1)<<37|((d>>23)&1)<<36|((d>>24)&1)<<35|((d>>23)&1)<<34|((d>>22)&1)<<33|((d>>21)&1)<<32|((d>>20)&1)<<31|((d>>19)&1)<<30|((d>>20)&1)<<29|((d>>19)&1)<<28|((d>>18)&1)<<27|((d>>17)&1)<<26|((d>>16)&1)<<25|((d>>15)&1)<<24|((d>>16)&1)<<23|((d>>15)&1)<<22|((d>>14)&1)<<21|((d>>13)&1)<<20|((d>>12)&1)<<19|((d>>11)&1)<<18|((d>>12)&1)<<17|((d>>11)&1)<<16|((d>>10)&1)<<15|((d>> 9)&1)<<14|((d>> 8)&1)<<13|((d>> 7)&1)<<12|((d>> 8)&1)<<11|((d>> 7)&1)<<10|((d>> 6)&1)<< 9|((d>> 5)&1)<< 8|((d>> 4)&1)<< 7|((d>> 3)&1)<< 6|((d>> 4)&1)<< 5|((d>> 3)&1)<< 4|((d>> 2)&1)<< 3|((d>> 1)&1)<< 2|((d>> 0)&1)<< 1|((d>>31)&1)<< 0

def	desCiphFunc(R,rk):
	# S-boxes
	S1=[[0xE,0x4,0xD,0x1,0x2,0xF,0xB,0x8,0x3,0xA,0x6,0xC,0x5,0x9,0x0,0x7],[0x0,0xF,0x7,0x4,0xE,0x2,0xD,0x1,0xA,0x6,0xC,0xB,0x9,0x5,0x3,0x8],[0x4,0x1,0xE,0x8,0xD,0x6,0x2,0xB,0xF,0xC,0x9,0x7,0x3,0xA,0x5,0x0],[0xF,0xC,0x8,0x2,0x4,0x9,0x1,0x7,0x5,0xB,0x3,0xE,0xA,0x0,0x6,0xD]]
	S2=[[0xF,0x1,0x8,0xE,0x6,0xB,0x3,0x4,0x9,0x7,0x2,0xD,0xC,0x0,0x5,0xA],[0x3,0xD,0x4,0x7,0xF,0x2,0x8,0xE,0xC,0x0,0x1,0xA,0x6,0x9,0xB,0x5],[0x0,0xE,0x7,0xB,0xA,0x4,0xD,0x1,0x5,0x8,0xC,0x6,0x9,0x3,0x2,0xF],[0xD,0x8,0xA,0x1,0x3,0xF,0x4,0x2,0xB,0x6,0x7,0xC,0x0,0x5,0xE,0x9]]
	S3=[[0xA,0x0,0x9,0xE,0x6,0x3,0xF,0x5,0x1,0xD,0xC,0x7,0xB,0x4,0x2,0x8],[0xD,0x7,0x0,0x9,0x3,0x4,0x6,0xA,0x2,0x8,0x5,0xE,0xC,0xB,0xF,0x1],[0xD,0x6,0x4,0x9,0x8,0xF,0x3,0x0,0xB,0x1,0x2,0xC,0x5,0xA,0xE,0x7],[0x1,0xA,0xD,0x0,0x6,0x9,0x8,0x7,0x4,0xF,0xE,0x3,0xB,0x5,0x2,0xC]]
	S4=[[0x7,0xD,0xE,0x3,0x0,0x6,0x9,0xA,0x1,0x2,0x8,0x5,0xB,0xC,0x4,0xF],[0xD,0x8,0xB,0x5,0x6,0xF,0x0,0x3,0x4,0x7,0x2,0xC,0x1,0xA,0xE,0x9],[0xA,0x6,0x9,0x0,0xC,0xB,0x7,0xD,0xF,0x1,0x3,0xE,0x5,0x2,0x8,0x4],[0x3,0xF,0x0,0x6,0xA,0x1,0xD,0x8,0x9,0x4,0x5,0xB,0xC,0x7,0x2,0xE]]
	S5=[[0x2,0xC,0x4,0x1,0x7,0xA,0xB,0x6,0x8,0x5,0x3,0xF,0xD,0x0,0xE,0x9],[0xE,0xB,0x2,0xC,0x4,0x7,0xD,0x1,0x5,0x0,0xF,0xA,0x3,0x9,0x8,0x6],[0x4,0x2,0x1,0xB,0xA,0xD,0x7,0x8,0xF,0x9,0xC,0x5,0x6,0x3,0x0,0xE],[0xB,0x8,0xC,0x7,0x1,0xE,0x2,0xD,0x6,0xF,0x0,0x9,0xA,0x4,0x5,0x3]]
	S6=[[0xC,0x1,0xA,0xF,0x9,0x2,0x6,0x8,0x0,0xD,0x3,0x4,0xE,0x7,0x5,0xB],[0xA,0xF,0x4,0x2,0x7,0xC,0x9,0x5,0x6,0x1,0xD,0xE,0x0,0xB,0x3,0x8],[0x9,0xE,0xF,0x5,0x2,0x8,0xC,0x3,0x7,0x0,0x4,0xA,0x1,0xD,0xB,0x6],[0x4,0x3,0x2,0xC,0x9,0x5,0xF,0xA,0xB,0xE,0x1,0x7,0x6,0x0,0x8,0xD]]
	S7=[[0x4,0xB,0x2,0xE,0xF,0x0,0x8,0xD,0x3,0xC,0x9,0x7,0x5,0xA,0x6,0x1],[0xD,0x0,0xB,0x7,0x4,0x9,0x1,0xA,0xE,0x3,0x5,0xC,0x2,0xF,0x8,0x6],[0x1,0x4,0xB,0xD,0xC,0x3,0x7,0xE,0xA,0xF,0x6,0x8,0x0,0x5,0x9,0x2],[0x6,0xB,0xD,0x8,0x1,0x4,0xA,0x7,0x9,0x5,0x0,0xF,0xE,0x2,0x3,0xC]]
	S8=[[0xD,0x2,0x8,0x4,0x6,0xF,0xB,0x1,0xA,0x9,0x3,0xE,0x5,0x0,0xC,0x7],[0x1,0xF,0xD,0x8,0xA,0x3,0x7,0x4,0xC,0x5,0x6,0xB,0x0,0xE,0x9,0x2],[0x7,0xB,0x4,0x1,0x9,0xC,0xE,0x2,0x0,0x6,0xA,0xD,0xF,0x3,0x5,0x8],[0x2,0x1,0xE,0x7,0x4,0xA,0x8,0xD,0xF,0xC,0x9,0x0,0x3,0x5,0x6,0xB]]

	# add E_bit_selection( R ) and round key ( rk )
	xorOut=E_bit_selection(R)^rk

	# generate S-box inputs
	iS1= (xorOut>>42)&0x3F
	iS2= (xorOut>>36)&0x3F
	iS3= (xorOut>>30)&0x3F
	iS4= (xorOut>>24)&0x3F
	iS5= (xorOut>>18)&0x3F
	iS6= (xorOut>>12)&0x3F
	iS7= (xorOut>> 6)&0x3F
	iS8= (xorOut>> 0)&0x3F

	# get row and column
	(rS1,cS1)= ( ((iS1>>5)&1)<<1|((iS1>>0)&1)<<0, (iS1>>1)&0xF )
	(rS2,cS2)= ( ((iS2>>5)&1)<<1|((iS2>>0)&1)<<0, (iS2>>1)&0xF )
	(rS3,cS3)= ( ((iS3>>5)&1)<<1|((iS3>>0)&1)<<0, (iS3>>1)&0xF )
	(rS4,cS4)= ( ((iS4>>5)&1)<<1|((iS4>>0)&1)<<0, (iS4>>1)&0xF )
	(rS5,cS5)= ( ((iS5>>5)&1)<<1|((iS5>>0)&1)<<0, (iS5>>1)&0xF )
	(rS6,cS6)= ( ((iS6>>5)&1)<<1|((iS6>>0)&1)<<0, (iS6>>1)&0xF )
	(rS7,cS7)= ( ((iS7>>5)&1)<<1|((iS7>>0)&1)<<0, (iS7>>1)&0xF )
	(rS8,cS8)= ( ((iS8>>5)&1)<<1|((iS8>>0)&1)<<0, (iS8>>1)&0xF )

	# S-box out
	oSbox=S1[rS1][cS1]<<28|S2[rS2][cS2]<<24|S3[rS3][cS3]<<20|S4[rS4][cS4]<<16|S5[rS5][cS5]<<12|S6[rS6][cS6]<<8|S7[rS7][cS7]<<4|S8[rS8][cS8]<<0

	return lastPerm(oSbox)
# desCiphFunc -- end


def	InitPerm	(d):
	return	((d>> 6)&1)<<63|((d>>14)&1)<<62|((d>>22)&1)<<61|((d>>30)&1)<<60|((d>>38)&1)<<59|((d>>46)&1)<<58|((d>>54)&1)<<57|((d>>62)&1)<<56|((d>> 4)&1)<<55|((d>>12)&1)<<54|((d>>20)&1)<<53|((d>>28)&1)<<52|((d>>36)&1)<<51|((d>>44)&1)<<50|((d>>52)&1)<<49|((d>>60)&1)<<48|((d>> 2)&1)<<47|((d>>10)&1)<<46|((d>>18)&1)<<45|((d>>26)&1)<<44|((d>>34)&1)<<43|((d>>42)&1)<<42|((d>>50)&1)<<41|((d>>58)&1)<<40|((d>> 0)&1)<<39|((d>> 8)&1)<<38|((d>>16)&1)<<37|((d>>24)&1)<<36|((d>>32)&1)<<35|((d>>40)&1)<<34|((d>>48)&1)<<33|((d>>56)&1)<<32|((d>> 7)&1)<<31|((d>>15)&1)<<30|((d>>23)&1)<<29|((d>>31)&1)<<28|((d>>39)&1)<<27|((d>>47)&1)<<26|((d>>55)&1)<<25|((d>>63)&1)<<24|((d>> 5)&1)<<23|((d>>13)&1)<<22|((d>>21)&1)<<21|((d>>29)&1)<<20|((d>>37)&1)<<19|((d>>45)&1)<<18|((d>>53)&1)<<17|((d>>61)&1)<<16|((d>> 3)&1)<<15|((d>>11)&1)<<14|((d>>19)&1)<<13|((d>>27)&1)<<12|((d>>35)&1)<<11|((d>>43)&1)<<10|((d>>51)&1)<< 9|((d>>59)&1)<< 8|((d>> 1)&1)<< 7|((d>> 9)&1)<< 6|((d>>17)&1)<< 5|((d>>25)&1)<< 4|((d>>33)&1)<< 3|((d>>41)&1)<< 2|((d>>49)&1)<< 1|((d>>57)&1)<< 0

def	InvInitPerm	(d):
	return	((d>>24)&1)<<63|((d>>56)&1)<<62|((d>>16)&1)<<61|((d>>48)&1)<<60|((d>> 8)&1)<<59|((d>>40)&1)<<58|((d>> 0)&1)<<57|((d>>32)&1)<<56|((d>>25)&1)<<55|((d>>57)&1)<<54|((d>>17)&1)<<53|((d>>49)&1)<<52|((d>> 9)&1)<<51|((d>>41)&1)<<50|((d>> 1)&1)<<49|((d>>33)&1)<<48|((d>>26)&1)<<47|((d>>58)&1)<<46|((d>>18)&1)<<45|((d>>50)&1)<<44|((d>>10)&1)<<43|((d>>42)&1)<<42|((d>> 2)&1)<<41|((d>>34)&1)<<40|((d>>27)&1)<<39|((d>>59)&1)<<38|((d>>19)&1)<<37|((d>>51)&1)<<36|((d>>11)&1)<<35|((d>>43)&1)<<34|((d>> 3)&1)<<33|((d>>35)&1)<<32|((d>>28)&1)<<31|((d>>60)&1)<<30|((d>>20)&1)<<29|((d>>52)&1)<<28|((d>>12)&1)<<27|((d>>44)&1)<<26|((d>> 4)&1)<<25|((d>>36)&1)<<24|((d>>29)&1)<<23|((d>>61)&1)<<22|((d>>21)&1)<<21|((d>>53)&1)<<20|((d>>13)&1)<<19|((d>>45)&1)<<18|((d>> 5)&1)<<17|((d>>37)&1)<<16|((d>>30)&1)<<15|((d>>62)&1)<<14|((d>>22)&1)<<13|((d>>54)&1)<<12|((d>>14)&1)<<11|((d>>46)&1)<<10|((d>> 6)&1)<< 9|((d>>38)&1)<< 8|((d>>31)&1)<< 7|((d>>63)&1)<< 6|((d>>23)&1)<< 5|((d>>55)&1)<< 4|((d>>15)&1)<< 3|((d>>47)&1)<< 2|((d>> 7)&1)<< 1|((d>>39)&1)<< 0


def	des_core( k, d, enc ):

	# DEBUG_controls
	DEBUG_show_basic_info=0
	DEBUG_show_iniPerm=0
	DEBUG_show_round_data=0
	DEBUG_show_InvIniPerm=0

	L=	[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
	R=	[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]

	# generate a key schedule
	rk=keyGen(k)

	if	enc==1:
		# initial permutation
		iniLR= InitPerm(d)
		(L[0],R[0])=(iniLR>>32,iniLR&0xFFFFFFFF)

		# des round: from round 1 to 15
		for rnd in range(1,16):
			(L[rnd],R[rnd])=(R[rnd-1],L[rnd-1]^desCiphFunc( R[rnd-1],rk[rnd]))

		# last round
		(L[16],R[16])=(L[15]^desCiphFunc(R[15],rk[16]),R[15])

		# (final) inverse initial permutation
		dout= InvInitPerm(L[16]<<32|R[16])
	else:
		# initial permutation
		iniLR= InitPerm(d)
		(L[16],R[16])=(iniLR>>32,iniLR&0xFFFFFFFF)

		# last round
		(L[15],R[15])=(L[16]^desCiphFunc(R[16],rk[16]),R[16])

		# des round: from round 15 to 0
		for rnd in range(15,0,-1):
			(L[rnd-1],R[rnd-1])=(R[rnd]^desCiphFunc(L[rnd],rk[rnd]),L[rnd])

		# (final) inverse initial permutation
		dout= InvInitPerm(L[0]<<32|R[0])

	if	DEBUG_show_basic_info==1:
		if		enc==1:
			print("\n\n < Encryption >")
			print("  pt: %08X %08X" % ( (d>>32)&0xFFFFFFFF, (d>> 0)&0xFFFFFFFF) )
			print(" key: %08X %08X"% ( k>>32, k&0xFFFFFFFF) )
		else:
			print("\n\n < Decryption >")
			print("  ct: %08X %08X"% ( (d>>32)&0xFFFFFFFF, (d>> 0)&0xFFFFFFFF) )
			print(" key: %08X %08X"% ( k>>32, k&0xFFFFFFFF) )

	if	DEBUG_show_iniPerm==1:
		print( "  IP:", "%08X"%(iniLR>>32), "%08X"%(iniLR&0xFFFFFFFF) )
	if	DEBUG_show_round_data==1:
		if	enc==1:
			for rnd in range( 0,17 ):
				print( "  %2d:"%rnd,"%08X"%L[rnd],"%08X"%R[rnd] )
		else:
			for rnd in range(16,-1,-1):
				print( "  %2d:"%rnd,"%08X"%L[rnd],"%08X"%R[rnd] )
	if	DEBUG_show_InvIniPerm==1:
		print( "IP-1:", "%08X"%(dout>>32), "%08X"%(dout&0xFFFFFFFF) )

	return dout
